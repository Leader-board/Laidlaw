
;; Function std::basic_ios<char>::rdstate (_ZNKSt9basic_iosIcSt11char_traitsIcEE7rdstateEv, funcdef_no=2293, decl_uid=32199, cgraph_uid=1053, symbol_order=1070)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_3 = *this + 256
ESCAPED = _3

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"this"[label="this = { 5 }"];
"_3";
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*this";
"*_3";

  // Edges in the constraint graph:
"_3" -> "ESCAPED";
"*ESCAPED" -> "ESCAPED";
"NONLOCAL" -> "*ESCAPED";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"this" [label="\N\n_3 = *this + 256\l"];
"_3";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_3";
"_3" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"this" [label="\N\n_3 = *this + 256\l"];
"_3";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_3";
"_3" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_3 = { ESCAPED NONLOCAL }


Alias information for std::ios_base::iostate std::basic_ios<_CharT, _Traits>::rdstate() const [with _CharT = char; _Traits = std::char_traits<char>]

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to non-local, points-to NULL, points-to vars: { }

std::basic_ios<char>::rdstate (const struct basic_ios * const this)
{
  iostate _3;

  <bb 2> :
  _3 = this_2(D)->D.32317._M_streambuf_state;
  return _3;

}



;; Function std::basic_ostream<char>::operator<< (_ZNSolsEd, funcdef_no=2148, decl_uid=33054, cgraph_uid=908, symbol_order=925)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__f = &NONLOCAL
ESCAPED = this
ESCAPED = __f
_5 = NONLOCAL
ESCAPED = _5

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"this"[label="this = { 5 }"];
"__f"[label="__f = { 5 }"];
"_ZNSo9_M_insertIdEERSoT_";
"_5";
"*NULL";
"*ANYTHING";
"*STRING";
"*STOREDANYTHING";
"*INTEGER";
"*this";
"*__f";
"*_ZNSo9_M_insertIdEERSoT_";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"this" -> "ESCAPED";
"__f" -> "ESCAPED";
"_5" -> "ESCAPED";
"ESCAPED" -> "ESCAPED";
"NONLOCAL" -> "_5";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"this";
"_ZNSo9_M_insertIdEERSoT_";
"_5";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"this" -> "ESCAPED";
"_5" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = _5\l"];
"STOREDANYTHING";
"INTEGER";
"this";
"_ZNSo9_M_insertIdEERSoT_";
"_5";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"this" -> "ESCAPED";
"_5" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _5
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__f = { NONLOCAL } same as this
_ZNSo9_M_insertIdEERSoT_ = { }
_5 = { ESCAPED NONLOCAL }


Alias information for std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(double) [with _CharT = char; _Traits = std::char_traits<char>]

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to non-local, points-to NULL, points-to vars: { }
_5, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

std::basic_ostream<char>::operator<< (struct basic_ostream * const this, double __f)
{
  struct __ostream_type & _5;

  <bb 2> :
  _5 = std::basic_ostream<char>::_M_insert<double> (this_2(D), __f_3(D));
  return _5;

}



;; Function std::basic_ostream<char>::operator<< (_ZNSolsEf, funcdef_no=2149, decl_uid=33057, cgraph_uid=909, symbol_order=926)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__f = &NONLOCAL
_1 = __f
ESCAPED = this
ESCAPED = _1
_6 = NONLOCAL
ESCAPED = _6

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"this"[label="this = { 5 }"];
"__f"[label="__f = { 5 }"];
"_ZNSo9_M_insertIdEERSoT_";
"_1";
"_6";
"*NULL";
"*ANYTHING";
"*STRING";
"*STOREDANYTHING";
"*INTEGER";
"*this";
"*__f";
"*_ZNSo9_M_insertIdEERSoT_";
"*_1";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"this" -> "ESCAPED";
"_1" -> "ESCAPED";
"_6" -> "ESCAPED";
"ESCAPED" -> "ESCAPED";
"__f" -> "_1";
"NONLOCAL" -> "_6";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"this";
"_ZNSo9_M_insertIdEERSoT_";
"_6";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"this" -> "ESCAPED";
"_6" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = _6\l"];
"STOREDANYTHING";
"INTEGER";
"this";
"_ZNSo9_M_insertIdEERSoT_";
"_6";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"this" -> "ESCAPED";
"_6" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _6
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__f = { NONLOCAL } same as this
_ZNSo9_M_insertIdEERSoT_ = { }
_1 = { NONLOCAL } same as this
_6 = { ESCAPED NONLOCAL }


Alias information for std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(float) [with _CharT = char; _Traits = std::char_traits<char>]

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_4(D), points-to non-local, points-to NULL, points-to vars: { }
_6, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

std::basic_ostream<char>::operator<< (struct basic_ostream * const this, float __f)
{
  double _1;
  struct __ostream_type & _6;

  <bb 2> :
  _1 = (double) __f_2(D);
  _6 = std::basic_ostream<char>::_M_insert<double> (this_4(D), _1);
  return _6;

}



;; Function std::operator<< <std::char_traits<char> > (_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c, funcdef_no=2147, decl_uid=33238, cgraph_uid=907, symbol_order=924)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__out = &NONLOCAL
__c = &NONLOCAL
ESCAPED = __out
ESCAPED = &__c
ESCAPED = &NONLOCAL
_4 = NONLOCAL
ESCAPED = _4

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED"[label="ESCAPED = { 5 9 }"];
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"__out"[label="__out = { 5 }"];
"__c"[label="__c = { 5 }"];
"_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l";
"_4";
"*NULL";
"*ANYTHING";
"*STRING";
"*STOREDANYTHING";
"*INTEGER";
"*__out";
"*__c";
"*_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"__out" -> "ESCAPED";
"_4" -> "ESCAPED";
"ESCAPED" -> "ESCAPED";
"NONLOCAL" -> "_4";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"__out";
"__c";
"_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l";
"_4";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "__c";
"__out" -> "ESCAPED";
"_4" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = _4\l"];
"STOREDANYTHING";
"INTEGER";
"__out";
"__c";
"_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l";
"_4";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "__c";
"__out" -> "ESCAPED";
"__c" -> "ESCAPED";
"_4" -> "ESCAPED";
"_4" -> "__c";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL __c }
NONLOCAL = { ESCAPED NONLOCAL } same as _4
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__out = { NONLOCAL }
__c = { ESCAPED NONLOCAL }
_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l = { }
_4 = { ESCAPED NONLOCAL }


Alias information for std::basic_ostream<char, _Traits>& std::operator<<(std::basic_ostream<char, _Traits>&, char) [with _Traits = std::char_traits<char>]

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.33240 } (escaped)

Flow-insensitive points-to information

__out_2(D), points-to non-local, points-to NULL, points-to vars: { }
_4, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

std::operator<< <std::char_traits<char> > (struct basic_ostream & __out, char __c)
{
  struct basic_ostream & _4;

  <bb 2> :
  _4 = std::__ostream_insert<char, std::char_traits<char> > (__out_2(D), &__c, 1);
  return _4;

}



;; Function __static_initialization_and_destruction_0 (_Z41__static_initialization_and_destruction_0ii, funcdef_no=2396, decl_uid=48223, cgraph_uid=1156, symbol_order=1223)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__initialize_p = &NONLOCAL
__priority = &NONLOCAL
_ZStL8__ioinit = NONLOCAL
ESCAPED = &_ZStL8__ioinit
ESCAPED = &_ZNSt8ios_base4InitD1Ev
ESCAPED = &_ZStL8__ioinit
__dso_handle = NONLOCAL
ESCAPED = &__dso_handle

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED"[label="ESCAPED = { 11 13 14 }"];
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"__initialize_p"[label="__initialize_p = { 5 }"];
"__priority"[label="__priority = { 5 }"];
"_ZNSt8ios_base4InitC1Ev";
"_ZStL8__ioinit";
"__cxa_atexit";
"_ZNSt8ios_base4InitD1Ev";
"__dso_handle";
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*__initialize_p";
"*__priority";
"*_ZNSt8ios_base4InitC1Ev";
"*_ZStL8__ioinit";
"*__cxa_atexit";
"*_ZNSt8ios_base4InitD1Ev";
"*__dso_handle";

  // Edges in the constraint graph:
"*ESCAPED" -> "ESCAPED";
"NONLOCAL" -> "_ZStL8__ioinit";
"NONLOCAL" -> "__dso_handle";
"NONLOCAL" -> "*ESCAPED";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"__initialize_p";
"_ZNSt8ios_base4InitC1Ev";
"_ZStL8__ioinit";
"__cxa_atexit";
"_ZNSt8ios_base4InitD1Ev";
"__dso_handle";

  // Edges in the constraint graph:
"NONLOCAL" -> "_ZStL8__ioinit";
"NONLOCAL" -> "__dso_handle";
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_ZStL8__ioinit";
"STOREDANYTHING" -> "_ZNSt8ios_base4InitD1Ev";
"STOREDANYTHING" -> "__dso_handle";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"__initialize_p";
"_ZNSt8ios_base4InitC1Ev";
"_ZStL8__ioinit";
"__cxa_atexit";
"_ZNSt8ios_base4InitD1Ev";
"__dso_handle";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"NONLOCAL" -> "_ZStL8__ioinit";
"NONLOCAL" -> "_ZNSt8ios_base4InitD1Ev";
"NONLOCAL" -> "__dso_handle";
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_ZStL8__ioinit";
"STOREDANYTHING" -> "_ZNSt8ios_base4InitD1Ev";
"STOREDANYTHING" -> "__dso_handle";
"_ZStL8__ioinit" -> "ESCAPED";
"_ZNSt8ios_base4InitD1Ev" -> "ESCAPED";
"__dso_handle" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL _ZStL8__ioinit _ZNSt8ios_base4InitD1Ev __dso_handle }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__initialize_p = { NONLOCAL }
__priority = { NONLOCAL } same as __initialize_p
_ZNSt8ios_base4InitC1Ev = { }
_ZStL8__ioinit = { ESCAPED NONLOCAL }
__cxa_atexit = { }
_ZNSt8ios_base4InitD1Ev = { ESCAPED NONLOCAL }
__dso_handle = { ESCAPED NONLOCAL }


Alias information for void __static_initialization_and_destruction_0(int, int)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.39834 D.48228 } (nonlocal, escaped, interposable)

Flow-insensitive points-to information


__static_initialization_and_destruction_0 (int __initialize_p, int __priority)
{
  <bb 2> :
  if (__initialize_p_2(D) == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  if (__priority_4(D) == 65535)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  std::ios_base::Init::Init (&__ioinit);
  __cxa_atexit (__dt_comp , &__ioinit, &__dso_handle);

  <bb 5> :
  return;

}



;; Function std::char_traits<char>::length (_ZNSt11char_traitsIcE6lengthEPKc, funcdef_no=397, decl_uid=11285, cgraph_uid=73, symbol_order=74)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__s = &NONLOCAL
CALLUSED(9) = CALLUSED(9) + UNKNOWN
CALLUSED(9) = __s
ESCAPED = _3

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"__s"[label="__s = { 5 }"];
"CALLUSED(9)";
"CALLCLOBBERED(10)";
"_3";
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*__s";
"*CALLUSED(9)";
"*CALLCLOBBERED(10)";
"*_3";

  // Edges in the constraint graph:
"_3" -> "ESCAPED";
"*ESCAPED" -> "ESCAPED";
"__s" -> "CALLUSED(9)";
"NONLOCAL" -> "*ESCAPED";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"__s";
"CALLUSED(9)" [label="\N\nCALLUSED(9) = CALLUSED(9) + UNKNOWN\l"];
"CALLCLOBBERED(10)";
"_3";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "CALLUSED(9)";
"__s" -> "CALLUSED(9)";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"__s";
"CALLUSED(9)" [label="\N\nCALLUSED(9) = CALLUSED(9) + UNKNOWN\l"];
"CALLCLOBBERED(10)";
"_3";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "CALLUSED(9)";
"__s" -> "CALLUSED(9)";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__s = { NONLOCAL }
CALLUSED(9) = { NONLOCAL }
CALLCLOBBERED(10) = { }
_3 = { }


Alias information for static std::size_t std::char_traits<char>::length(const char_type*)

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information

__s_2(D), points-to non-local, points-to NULL, points-to vars: { }

std::char_traits<char>::length (const char_type * __s)
{
  size_t _3;

  <bb 2> :
  _3 = __builtin_strlen (__s_2(D));
  return _3;

}



;; Function std::operator| (_ZStorSt12_Ios_IostateS_, funcdef_no=1147, decl_uid=26730, cgraph_uid=387, symbol_order=389)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__a = &NONLOCAL
__b = &NONLOCAL
_3 = __a
_3 = __b
ESCAPED = _3

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"__a"[label="__a = { 5 }"];
"__b"[label="__b = { 5 }"];
"_3";
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*__a";
"*__b";
"*_3";

  // Edges in the constraint graph:
"_3" -> "ESCAPED";
"*ESCAPED" -> "ESCAPED";
"__a" -> "_3";
"__b" -> "_3";
"NONLOCAL" -> "*ESCAPED";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"__a";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"__a" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"__a";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"STOREDANYTHING" -> "ESCAPED";
"__a" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__a = { NONLOCAL }
__b = { NONLOCAL } same as __a
_3 = { NONLOCAL } same as __a


Alias information for constexpr std::_Ios_Iostate std::operator|(std::_Ios_Iostate, std::_Ios_Iostate)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information


std::operator| (_Ios_Iostate __a, _Ios_Iostate __b)
{
  _Ios_Iostate _3;

  <bb 2> :
  _3 = __a_1(D) | __b_2(D);
  return _3;

}



;; Function std::basic_ios<char>::setstate (_ZNSt9basic_iosIcSt11char_traitsIcEE8setstateESt12_Ios_Iostate, funcdef_no=2258, decl_uid=32204, cgraph_uid=1018, symbol_order=1035)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__state = &NONLOCAL
_5 = *this + 256
_8 = _5
_8 = __state
ESCAPED = this
ESCAPED = _8

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"this"[label="this = { 5 }"];
"__state"[label="__state = { 5 }"];
"_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate";
"_5";
"_8";
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*this";
"*__state";
"*_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate";
"*_5";
"*_8";

  // Edges in the constraint graph:
"this" -> "ESCAPED";
"_8" -> "ESCAPED";
"*ESCAPED" -> "ESCAPED";
"__state" -> "_8";
"_5" -> "_8";
"NONLOCAL" -> "*ESCAPED";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"this" [label="\N\n_5 = *this + 256\l"];
"_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate";
"_5";
"_8";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_5";
"this" -> "ESCAPED";
"this" -> "_8";
"_5" -> "_8";
"_8" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"this" [label="\N\n_5 = *this + 256\l"];
"_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate";
"_5";
"_8";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_5";
"this" -> "ESCAPED";
"this" -> "_8";
"_5" -> "_8";
"_8" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__state = { NONLOCAL } same as this
_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate = { }
_5 = { ESCAPED NONLOCAL }
_8 = { ESCAPED NONLOCAL }


Alias information for void std::basic_ios<_CharT, _Traits>::setstate(std::ios_base::iostate) [with _CharT = char; _Traits = std::char_traits<char>]

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_4(D), points-to non-local, points-to NULL, points-to vars: { }

std::basic_ios<char>::setstate (struct basic_ios * const this, iostate __state)
{
  iostate D.48352;
  _Ios_Iostate D.48350;
  _Ios_Iostate _5;
  _Ios_Iostate _8;

  <bb 2> :
  _5 = MEM[(const struct basic_ios *)this_4(D)].D.32317._M_streambuf_state;
  _8 = _5 | __state_7(D);
  std::basic_ios<char>::clear (this_4(D), _8);
  return;

}



;; Function std::operator<< <std::char_traits<char> > (_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc, funcdef_no=2146, decl_uid=33268, cgraph_uid=906, symbol_order=923)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__out = &NONLOCAL
__s = &NONLOCAL
_1 = *__out
_3 = *_1
_4 = _3
_5 = __out
_13 = *_5 + 256
_16 = _13
_16 = &NONLOCAL
ESCAPED = _5
ESCAPED = _16
CALLUSED(17) = CALLUSED(17) + UNKNOWN
CALLUSED(17) = __s
_19 = _17
_6 = _17
_7 = _17
ESCAPED = __out
ESCAPED = __s
ESCAPED = _7
ESCAPED = __out

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"__out"[label="__out = { 5 }"];
"__s"[label="__s = { 5 }"];
"_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate";
"_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l";
"_1";
"_3";
"_4";
"_5";
"_13";
"_16"[label="_16 = { 5 }"];
"CALLUSED(17)";
"CALLCLOBBERED(18)";
"_19";
"_17";
"_6";
"_7";
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*__out";
"*__s";
"*_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate";
"*_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l";
"*_1";
"*_3";
"*_4";
"*_5";
"*_13";
"*_16";
"*CALLUSED(17)";
"*CALLCLOBBERED(18)";
"*_19";
"*_17";
"*_6";
"*_7";

  // Edges in the constraint graph:
"__out" -> "ESCAPED";
"__s" -> "ESCAPED";
"_5" -> "ESCAPED";
"_16" -> "ESCAPED";
"_7" -> "ESCAPED";
"*ESCAPED" -> "ESCAPED";
"*__out" -> "_1";
"*_1" -> "_3";
"_3" -> "_4";
"__out" -> "_5";
"_13" -> "_16";
"__s" -> "CALLUSED(17)";
"_17" -> "_19";
"_17" -> "_6";
"_17" -> "_7";
"NONLOCAL" -> "*ESCAPED";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"__out" [label="\N\n_1 = *__out\l_13 = *__out + 256\l"];
"_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate";
"_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l";
"_1" [label="\N\n_3 = *_1\l"];
"_3";
"_13";
"_16";
"CALLUSED(17)" [label="\N\nCALLUSED(17) = CALLUSED(17) + UNKNOWN\l"];
"CALLCLOBBERED(18)";
"_19";
"_17";
"_6";
"_7";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_13";
"STOREDANYTHING" -> "CALLUSED(17)";
"__out" -> "ESCAPED";
"__out" -> "CALLUSED(17)";
"_13" -> "_16";
"_16" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"__out" [label="\N\n_1 = *__out\l_13 = *__out + 256\l"];
"_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate";
"_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l";
"_1" [label="\N\n_3 = *_1\l"];
"_3";
"_13";
"_16";
"CALLUSED(17)" [label="\N\nCALLUSED(17) = CALLUSED(17) + UNKNOWN\l"];
"CALLCLOBBERED(18)";
"_19";
"_17";
"_6";
"_7";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_13";
"STOREDANYTHING" -> "CALLUSED(17)";
"__out" -> "ESCAPED";
"__out" -> "CALLUSED(17)";
"_13" -> "_16";
"_16" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__out = { NONLOCAL }
__s = { NONLOCAL } same as __out
_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate = { }
_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l = { }
_1 = { ESCAPED NONLOCAL }
_3 = { ESCAPED NONLOCAL }
_4 = { ESCAPED NONLOCAL } same as _3
_5 = { NONLOCAL } same as __out
_13 = { ESCAPED NONLOCAL }
_16 = { ESCAPED NONLOCAL }
CALLUSED(17) = { NONLOCAL }
CALLCLOBBERED(18) = { }
_19 = { }
_17 = { }
_6 = { }
_7 = { }


Alias information for std::basic_ostream<char, _Traits>& std::operator<<(std::basic_ostream<char, _Traits>&, const char*) [with _Traits = std::char_traits<char>]

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_1, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_5, points-to non-local, points-to NULL, points-to vars: { }
__s_9(D), points-to non-local, points-to NULL, points-to vars: { }
__out_11(D), points-to non-local, points-to NULL, points-to vars: { }

std::operator<< <std::char_traits<char> > (struct basic_ostream & __out, const char * __s)
{
  size_t D.48357;
  int (*) () * _1;
  long int _3;
  sizetype _4;
  struct basic_ios * _5;
  long unsigned int _6;
  long int _7;
  _Ios_Iostate _13;
  _Ios_Iostate _16;
  long unsigned int _17;

  <bb 2> :
  if (__s_9(D) == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _1 = __out_11(D)->_vptr.basic_ostream;
  _3 = MEM[(long int *)_1 + -24B];
  _4 = (sizetype) _3;
  _5 = __out_11(D) + _4;
  _13 = MEM[(const struct basic_ios *)_5].D.32317._M_streambuf_state;
  _16 = _13 | 1;
  std::basic_ios<char>::clear (_5, _16);
  goto <bb 5>; [100.00%]

  <bb 4> :
  _17 = __builtin_strlen (__s_9(D));
  _19 = _17;
  _6 = _17;
  _7 = (long int) _17;
  std::__ostream_insert<char, std::char_traits<char> > (__out_11(D), __s_9(D), _7);

  <bb 5> :
  return __out_11(D);

}



;; Function mainbase (_Z8mainbasev, funcdef_no=1888, decl_uid=44493, cgraph_uid=648, symbol_order=665)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
q_76 = &NONLOCAL
q_76 = q_148
r_78 = r_93
r_78 = r_79
p_77 = &NONLOCAL
p_77 = p_146
r_79 = r_78
r_79 = r_84
begin_97 = NONLOCAL
a = NONLOCAL
a = &NONLOCAL
ESCAPED = &NONLOCAL
b = NONLOCAL
b = &NONLOCAL
ESCAPED = &NONLOCAL
c = NONLOCAL
c = &NONLOCAL
ESCAPED = &NONLOCAL
d = NONLOCAL
d = &NONLOCAL
ESCAPED = &NONLOCAL
k = NONLOCAL
k = &NONLOCAL
ESCAPED = &NONLOCAL
k = &NONLOCAL
ESCAPED = &NONLOCAL
k = &NONLOCAL
ESCAPED = &NONLOCAL
k = &NONLOCAL
ESCAPED = &NONLOCAL
k = &NONLOCAL
ESCAPED = &NONLOCAL
count_73 = &NULL
count_73 = count_74
b.0_1 = b
k.1_2 = k
count_74 = count_73
count_74 = count_75
a.2_3 = a
k.3_4 = k
a.4_5 = a
a.5_6 = a
_7 = a.4_5
_7 = a.5_6
x = NONLOCAL
x = _7
ESCAPED = _7
b.6_8 = b
b.7_9 = b
_10 = b.6_8
_10 = b.7_9
y = NONLOCAL
y = _10
ESCAPED = _10
x.8_11 = x
y.9_12 = y
_13 = x.8_11
_13 = y.9_12
c = _13
ESCAPED = _13
b.10_14 = b
powcheck = NONLOCAL
powcheck = b.10_14
ESCAPED = b.10_14
count_75 = count_74
count_75 = count_75
count_75 = count_113
k.11_15 = k
_16 = k.11_15
_16 = &NONLOCAL
callarg(47) = _16
_17 = callarg(47) + UNKNOWN
_17 = &NONLOCAL
powcheck.12_18 = powcheck
powcheck.13_19 = powcheck
powcheck.14_20 = powcheck
_21 = powcheck.13_19
_21 = powcheck.14_20
c.15_22 = c
c.16_23 = c
d.17_24 = d
c.18_25 = c
d = c.18_25
ESCAPED = c.18_25
count_113 = count_75
count_113 = &NONLOCAL
k.19_26 = k
_27 = k.19_26
_27 = &NONLOCAL
_28 = _27
_28 = &NONLOCAL
powcheck = _28
ESCAPED = _28
powcheck.20_29 = powcheck
_30 = powcheck.20_29
_30 = &NONLOCAL
powcheck = _30
ESCAPED = _30
a.21_31 = a
_32 = a.21_31
_32 = &NONLOCAL
a = _32
ESCAPED = _32
a = &NONLOCAL
ESCAPED = &NONLOCAL
b.22_33 = b
_34 = b.22_33
_34 = &NONLOCAL
b = _34
ESCAPED = _34
end_120 = NONLOCAL
_35 = end_120
_35 = begin_97
_36 = _35
elapsed_secs_121 = _36
elapsed_secs_121 = &NONLOCAL
_37 = p_77
_37 = &NONLOCAL
timetake = elapsed_secs_121
r_80 = r_79
r_80 = &NONLOCAL
r_81 = r_80
r_81 = &NONLOCAL
r_82 = r_81
r_82 = &NONLOCAL
r_83 = r_82
r_83 = &NONLOCAL
r_84 = r_83
r_84 = &NONLOCAL
_38 = r_84
_39 = p_77
_39 = &NONLOCAL
_40 = timetake
_41 = _38
_41 = _40
_42 = _41
_42 = &NONLOCAL
_43 = p_77
_43 = &NONLOCAL
_44 = _42
score = NONLOCAL
score = _44
ESCAPED = _44
totalscore = NONLOCAL
totalscore.23_45 = totalscore
_46 = totalscore.23_45
_47 = p_77
_47 = &NONLOCAL
_48 = score
_49 = _48
_50 = _49
_50 = &NONLOCAL
_51 = _46
_51 = _50
_52 = _51
totalscore = _52
ESCAPED = _52
_53 = p_77
_53 = &NONLOCAL
stagetime = NONLOCAL
_54 = stagetime
_55 = elapsed_secs_121
_55 = &NONLOCAL
_56 = p_77
_56 = &NONLOCAL
_57 = _54
_57 = _55
stagetime = _57
ESCAPED = _57
_58 = q_76
_58 = &NONLOCAL
_59 = _58
_59 = &NONLOCAL
_60 = _59
_60 = p_77
_61 = _60
_61 = &NONLOCAL
_ZSt4cout = NONLOCAL
ESCAPED = &_ZSt4cout
ESCAPED = _61
_132 = NONLOCAL
ESCAPED = _132
ESCAPED = &STRING
ESCAPED = &NONLOCAL
__c = &NONLOCAL
ESCAPED = _132
ESCAPED = &__c
ESCAPED = &NONLOCAL
_160 = NONLOCAL
ESCAPED = &_ZSt4cout
ESCAPED = &STRING
ESCAPED = &NONLOCAL
_65 = p_77
_65 = &NONLOCAL
_66 = timetake
ESCAPED = &_ZSt4cout
ESCAPED = _66
_169 = NONLOCAL
__c = &NONLOCAL
ESCAPED = _169
ESCAPED = &__c
ESCAPED = &NONLOCAL
_170 = NONLOCAL
ESCAPED = &_ZSt4cout
ESCAPED = &STRING
ESCAPED = &NONLOCAL
_69 = p_77
_69 = &NONLOCAL
_70 = score
_71 = _70
_71 = &NONLOCAL
_179 = _71
ESCAPED = &_ZSt4cout
ESCAPED = _179
_180 = NONLOCAL
__c = &NONLOCAL
ESCAPED = _180
ESCAPED = &__c
ESCAPED = &NONLOCAL
_181 = NONLOCAL
p_146 = p_77
p_146 = &NONLOCAL
q_148 = q_76
q_148 = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED"[label="ESCAPED = { 3 5 23 25 27 28 }"];
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"clock";
"a"[label="a = { 5 }"];
"b"[label="b = { 5 }"];
"c"[label="c = { 5 }"];
"d"[label="d = { 5 }"];
"k"[label="k = { 5 }"];
"x";
"y";
"ceil";
"timetake";
"score";
"_ZNSolsEi";
"_ZSt4cout";
"_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l";
"__c"[label="__c = { 5 }"];
"_ZNSo9_M_insertIdEERSoT_";
"__c"[label="__c = { 5 }"];
"__c"[label="__c = { 5 }"];
"q_76"[label="q_76 = { 5 }"];
"r_93";
"p_77"[label="p_77 = { 5 }"];
"r_84"[label="r_84 = { 5 }"];
"begin_97";
"count_73"[label="count_73 = { 1 5 }"];
"b.0_1";
"k.1_2";
"a.2_3";
"k.3_4";
"a.4_5";
"a.5_6";
"_7";
"b.6_8";
"b.7_9";
"_10";
"x.8_11";
"y.9_12";
"_13";
"b.10_14";
"k.11_15";
"_16"[label="_16 = { 5 }"];
"callarg(47)";
"_17"[label="_17 = { 5 }"];
"powcheck.12_18";
"powcheck.13_19";
"powcheck.14_20";
"_21";
"c.15_22";
"c.16_23";
"d.17_24";
"c.18_25";
"k.19_26";
"_27"[label="_27 = { 5 }"];
"_28"[label="_28 = { 5 }"];
"_30"[label="_30 = { 5 }"];
"end_120";
"_35";
"_36";
"elapsed_secs_121"[label="elapsed_secs_121 = { 5 }"];
"_37"[label="_37 = { 5 }"];
"_38";
"_39"[label="_39 = { 5 }"];
"_40";
"_41";
"_42"[label="_42 = { 5 }"];
"_43"[label="_43 = { 5 }"];
"_44";
"_47"[label="_47 = { 5 }"];
"_48";
"_49";
"_50"[label="_50 = { 5 }"];
"_52";
"_53"[label="_53 = { 5 }"];
"_55"[label="_55 = { 5 }"];
"_56"[label="_56 = { 5 }"];
"_57";
"_58"[label="_58 = { 5 }"];
"_59"[label="_59 = { 5 }"];
"_60";
"_61"[label="_61 = { 5 }"];
"_132";
"_160";
"_65"[label="_65 = { 5 }"];
"_66";
"_169";
"_170";
"_69"[label="_69 = { 5 }"];
"_70";
"_71"[label="_71 = { 5 }"];
"_179";
"_180";
"_181";
"*NULL";
"*ANYTHING";
"*STRING";
"*STOREDANYTHING";
"*INTEGER";
"*clock";
"*d";
"*ceil";
"*_ZNSolsEi";
"*_ZSt4cout";
"*_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l";
"*__c";
"*_ZNSo9_M_insertIdEERSoT_";
"*__c";
"*__c";
"*q_76";
"*r_93";
"*p_77";
"*r_84";
"*count_73";
"*count_74";
"*b.0_1";
"*k.1_2";
"*count_75";
"*a.2_3";
"*k.3_4";
"*count_113";
"*k.11_15";
"*_16";
"*callarg(47)";
"*_17";
"*powcheck.12_18";
"*powcheck.13_19";
"*powcheck.14_20";
"*_21";
"*c.15_22";
"*c.16_23";
"*d.17_24";
"*_37";
"*_38";
"*_39";
"*_43";
"*_47";
"*_53";
"*_56";
"*_58";
"*_59";
"*_60";
"*_61";
"*_160";
"*_65";
"*_170";
"*_69";
"*_181";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"_7" -> "ESCAPED";
"_10" -> "ESCAPED";
"_13" -> "ESCAPED";
"b.10_14" -> "ESCAPED";
"c.18_25" -> "ESCAPED";
"_28" -> "ESCAPED";
"_30" -> "ESCAPED";
"a" -> "ESCAPED";
"b" -> "ESCAPED";
"_44" -> "ESCAPED";
"_52" -> "ESCAPED";
"_57" -> "ESCAPED";
"_61" -> "ESCAPED";
"_132" -> "ESCAPED";
"_66" -> "ESCAPED";
"_169" -> "ESCAPED";
"_179" -> "ESCAPED";
"_180" -> "ESCAPED";
"ESCAPED" -> "ESCAPED";
"NONLOCAL" -> "a";
"a" -> "a";
"a" -> "a";
"a" -> "a";
"NONLOCAL" -> "b";
"b" -> "b";
"b" -> "b";
"b" -> "b";
"NONLOCAL" -> "c";
"_13" -> "c";
"NONLOCAL" -> "d";
"c.18_25" -> "d";
"NONLOCAL" -> "k";
"NONLOCAL" -> "x";
"_7" -> "x";
"NONLOCAL" -> "y";
"_10" -> "y";
"elapsed_secs_121" -> "timetake";
"NONLOCAL" -> "score";
"_44" -> "score";
"NONLOCAL" -> "_ZSt4cout";
"q_76" -> "q_76";
"q_76" -> "q_76";
"p_77" -> "p_77";
"p_77" -> "p_77";
"r_84" -> "r_84";
"r_93" -> "r_84";
"r_84" -> "r_84";
"r_84" -> "r_84";
"r_84" -> "r_84";
"r_84" -> "r_84";
"r_84" -> "r_84";
"r_84" -> "r_84";
"NONLOCAL" -> "begin_97";
"count_73" -> "count_73";
"count_73" -> "count_73";
"count_73" -> "count_73";
"count_73" -> "count_73";
"b" -> "b.0_1";
"k" -> "k.1_2";
"a" -> "a.2_3";
"k" -> "k.3_4";
"a" -> "a.4_5";
"a" -> "a.5_6";
"a.4_5" -> "_7";
"a.5_6" -> "_7";
"b" -> "b.6_8";
"b" -> "b.7_9";
"b.6_8" -> "_10";
"b.7_9" -> "_10";
"x" -> "x.8_11";
"y" -> "y.9_12";
"x.8_11" -> "_13";
"y.9_12" -> "_13";
"b" -> "b.10_14";
"k" -> "k.11_15";
"k.11_15" -> "_16";
"_16" -> "callarg(47)";
"_30" -> "powcheck.12_18";
"_30" -> "powcheck.13_19";
"_30" -> "powcheck.14_20";
"powcheck.13_19" -> "_21";
"powcheck.14_20" -> "_21";
"c" -> "c.15_22";
"c" -> "c.16_23";
"d" -> "d.17_24";
"c" -> "c.18_25";
"k" -> "k.19_26";
"k.19_26" -> "_27";
"_27" -> "_28";
"NONLOCAL" -> "_30";
"_30" -> "_30";
"b.10_14" -> "_30";
"_28" -> "_30";
"_30" -> "_30";
"_30" -> "_30";
"NONLOCAL" -> "end_120";
"begin_97" -> "_35";
"end_120" -> "_35";
"_35" -> "_36";
"_36" -> "elapsed_secs_121";
"p_77" -> "_37";
"r_84" -> "_38";
"p_77" -> "_39";
"timetake" -> "_40";
"_38" -> "_41";
"_40" -> "_41";
"_41" -> "_42";
"p_77" -> "_43";
"_42" -> "_44";
"p_77" -> "_47";
"score" -> "_48";
"_48" -> "_49";
"_49" -> "_50";
"NONLOCAL" -> "_52";
"_52" -> "_52";
"_52" -> "_52";
"_52" -> "_52";
"_50" -> "_52";
"_52" -> "_52";
"_52" -> "_52";
"p_77" -> "_53";
"elapsed_secs_121" -> "_55";
"p_77" -> "_56";
"NONLOCAL" -> "_57";
"_57" -> "_57";
"_57" -> "_57";
"_55" -> "_57";
"_57" -> "_57";
"q_76" -> "_58";
"_58" -> "_59";
"p_77" -> "_60";
"_59" -> "_60";
"_60" -> "_61";
"NONLOCAL" -> "_132";
"NONLOCAL" -> "_160";
"p_77" -> "_65";
"timetake" -> "_66";
"NONLOCAL" -> "_169";
"NONLOCAL" -> "_170";
"p_77" -> "_69";
"score" -> "_70";
"_70" -> "_71";
"_71" -> "_179";
"NONLOCAL" -> "_180";
"NONLOCAL" -> "_181";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"clock";
"ceil";
"_ZNSolsEi";
"_ZSt4cout";
"_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l";
"__c";
"_ZNSo9_M_insertIdEERSoT_";
"__c";
"__c";
"q_76";
"r_93";
"begin_97" [label="\N\n_17 = begin_97 + UNKNOWN\l"];
"count_73";
"_17";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_ZSt4cout";
"STOREDANYTHING" -> "__c";
"STOREDANYTHING" -> "__c";
"STOREDANYTHING" -> "__c";
"STOREDANYTHING" -> "_17";
"q_76" -> "ESCAPED";
"q_76" -> "begin_97";
"begin_97" -> "ESCAPED";
"begin_97" -> "_ZSt4cout";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = begin_97\l"];
"STOREDANYTHING";
"INTEGER";
"clock";
"ceil";
"_ZNSolsEi";
"_ZSt4cout";
"_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l";
"__c";
"_ZNSo9_M_insertIdEERSoT_";
"__c";
"__c";
"q_76";
"r_93";
"begin_97" [label="\N\n_17 = begin_97 + UNKNOWN\l"];
"count_73";
"_17";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_ZSt4cout";
"STOREDANYTHING" -> "__c";
"STOREDANYTHING" -> "__c";
"STOREDANYTHING" -> "__c";
"STOREDANYTHING" -> "_17";
"_ZSt4cout" -> "ESCAPED";
"__c" -> "ESCAPED";
"__c" -> "ESCAPED";
"__c" -> "ESCAPED";
"q_76" -> "ESCAPED";
"q_76" -> "begin_97";
"begin_97" -> "ESCAPED";
"begin_97" -> "_ZSt4cout";
"begin_97" -> "__c";
"begin_97" -> "__c";
"begin_97" -> "__c";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { STRING ESCAPED NONLOCAL _ZSt4cout __c __c __c }
NONLOCAL = { ESCAPED NONLOCAL } same as begin_97
STOREDANYTHING = { }
INTEGER = { ANYTHING }
clock = { }
a = { ESCAPED NONLOCAL } same as begin_97
b = { ESCAPED NONLOCAL } same as begin_97
c = { ESCAPED NONLOCAL } same as begin_97
d = { ESCAPED NONLOCAL } same as begin_97
k = { ESCAPED NONLOCAL } same as begin_97
x = { ESCAPED NONLOCAL } same as begin_97
y = { ESCAPED NONLOCAL } same as begin_97
powcheck = { ESCAPED NONLOCAL } same as begin_97
ceil = { }
timetake = { ESCAPED NONLOCAL } same as begin_97
score = { ESCAPED NONLOCAL } same as begin_97
totalscore = { ESCAPED NONLOCAL } same as begin_97
stagetime = { ESCAPED NONLOCAL } same as begin_97
_ZNSolsEi = { }
_ZSt4cout = { ESCAPED NONLOCAL }
_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l = { }
__c = { ESCAPED NONLOCAL }
_ZNSo9_M_insertIdEERSoT_ = { }
__c = { ESCAPED NONLOCAL }
__c = { ESCAPED NONLOCAL }
q_76 = { NONLOCAL }
q_148 = { NONLOCAL } same as q_76
r_78 = { NONLOCAL } same as q_76
r_93 = { }
r_79 = { NONLOCAL } same as q_76
p_77 = { NONLOCAL } same as q_76
p_146 = { NONLOCAL } same as q_76
r_84 = { NONLOCAL } same as q_76
begin_97 = { ESCAPED NONLOCAL }
count_73 = { NULL NONLOCAL }
count_74 = { NULL NONLOCAL } same as count_73
b.0_1 = { ESCAPED NONLOCAL } same as begin_97
k.1_2 = { ESCAPED NONLOCAL } same as begin_97
count_75 = { NULL NONLOCAL } same as count_73
a.2_3 = { ESCAPED NONLOCAL } same as begin_97
k.3_4 = { ESCAPED NONLOCAL } same as begin_97
a.4_5 = { ESCAPED NONLOCAL } same as begin_97
a.5_6 = { ESCAPED NONLOCAL } same as begin_97
_7 = { ESCAPED NONLOCAL } same as begin_97
b.6_8 = { ESCAPED NONLOCAL } same as begin_97
b.7_9 = { ESCAPED NONLOCAL } same as begin_97
_10 = { ESCAPED NONLOCAL } same as begin_97
x.8_11 = { ESCAPED NONLOCAL } same as begin_97
y.9_12 = { ESCAPED NONLOCAL } same as begin_97
_13 = { ESCAPED NONLOCAL } same as begin_97
b.10_14 = { ESCAPED NONLOCAL } same as begin_97
count_113 = { NULL NONLOCAL } same as count_73
k.11_15 = { ESCAPED NONLOCAL } same as begin_97
_16 = { ESCAPED NONLOCAL } same as begin_97
callarg(47) = { ESCAPED NONLOCAL } same as begin_97
_17 = { ESCAPED NONLOCAL }
powcheck.12_18 = { ESCAPED NONLOCAL } same as begin_97
powcheck.13_19 = { ESCAPED NONLOCAL } same as begin_97
powcheck.14_20 = { ESCAPED NONLOCAL } same as begin_97
_21 = { ESCAPED NONLOCAL } same as begin_97
c.15_22 = { ESCAPED NONLOCAL } same as begin_97
c.16_23 = { ESCAPED NONLOCAL } same as begin_97
d.17_24 = { ESCAPED NONLOCAL } same as begin_97
c.18_25 = { ESCAPED NONLOCAL } same as begin_97
k.19_26 = { ESCAPED NONLOCAL } same as begin_97
_27 = { ESCAPED NONLOCAL } same as begin_97
_28 = { ESCAPED NONLOCAL } same as begin_97
powcheck.20_29 = { ESCAPED NONLOCAL } same as begin_97
_30 = { ESCAPED NONLOCAL } same as begin_97
a.21_31 = { ESCAPED NONLOCAL } same as begin_97
_32 = { ESCAPED NONLOCAL } same as begin_97
b.22_33 = { ESCAPED NONLOCAL } same as begin_97
_34 = { ESCAPED NONLOCAL } same as begin_97
end_120 = { ESCAPED NONLOCAL } same as begin_97
_35 = { ESCAPED NONLOCAL } same as begin_97
_36 = { ESCAPED NONLOCAL } same as begin_97
elapsed_secs_121 = { ESCAPED NONLOCAL } same as begin_97
_37 = { NONLOCAL } same as q_76
r_80 = { NONLOCAL } same as q_76
r_81 = { NONLOCAL } same as q_76
r_82 = { NONLOCAL } same as q_76
r_83 = { NONLOCAL } same as q_76
_38 = { NONLOCAL } same as q_76
_39 = { NONLOCAL } same as q_76
_40 = { ESCAPED NONLOCAL } same as begin_97
_41 = { ESCAPED NONLOCAL } same as begin_97
_42 = { ESCAPED NONLOCAL } same as begin_97
_43 = { NONLOCAL } same as q_76
_44 = { ESCAPED NONLOCAL } same as begin_97
totalscore.23_45 = { ESCAPED NONLOCAL } same as begin_97
_46 = { ESCAPED NONLOCAL } same as begin_97
_47 = { NONLOCAL } same as q_76
_48 = { ESCAPED NONLOCAL } same as begin_97
_49 = { ESCAPED NONLOCAL } same as begin_97
_50 = { ESCAPED NONLOCAL } same as begin_97
_51 = { ESCAPED NONLOCAL } same as begin_97
_52 = { ESCAPED NONLOCAL } same as begin_97
_53 = { NONLOCAL } same as q_76
_54 = { ESCAPED NONLOCAL } same as begin_97
_55 = { ESCAPED NONLOCAL } same as begin_97
_56 = { NONLOCAL } same as q_76
_57 = { ESCAPED NONLOCAL } same as begin_97
_58 = { NONLOCAL } same as q_76
_59 = { NONLOCAL } same as q_76
_60 = { NONLOCAL } same as q_76
_61 = { NONLOCAL } same as q_76
_132 = { ESCAPED NONLOCAL } same as begin_97
_160 = { ESCAPED NONLOCAL } same as begin_97
_65 = { NONLOCAL } same as q_76
_66 = { ESCAPED NONLOCAL } same as begin_97
_169 = { ESCAPED NONLOCAL } same as begin_97
_170 = { ESCAPED NONLOCAL } same as begin_97
_69 = { NONLOCAL } same as q_76
_70 = { ESCAPED NONLOCAL } same as begin_97
_71 = { ESCAPED NONLOCAL } same as begin_97
_179 = { ESCAPED NONLOCAL } same as begin_97
_180 = { ESCAPED NONLOCAL } same as begin_97
_181 = { ESCAPED NONLOCAL } same as begin_97


Alias information for void mainbase()

Aliased symbols

__c, UID D.48381, char, is addressable
__c, UID D.48372, char, is addressable
__c, UID D.48363, char, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.39827 D.48363 D.48372 D.48381 } (nonlocal, escaped, interposable)

Flow-insensitive points-to information

_132, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_160, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_169, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_170, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_180, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_181, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

mainbase ()
{
  struct basic_ostream & D.48382;
  char __c;
  struct __ostream_type & D.48379;
  struct basic_ostream & D.48376;
  struct basic_ostream & D.48373;
  char __c;
  struct __ostream_type & D.48370;
  struct basic_ostream & D.48367;
  struct basic_ostream & D.48364;
  char __c;
  struct basic_ostream & D.48361;
  float r;
  double elapsed_secs;
  clock_t end;
  clock_t begin;
  int p;
  int q;
  double timetake[5];
  long int count;
  double b.0_1;
  double k.1_2;
  double a.2_3;
  double k.3_4;
  double a.4_5;
  double a.5_6;
  double _7;
  double b.6_8;
  double b.7_9;
  double _10;
  double x.8_11;
  double y.9_12;
  double _13;
  double b.10_14;
  double k.11_15;
  double _16;
  double _17;
  double powcheck.12_18;
  double powcheck.13_19;
  double powcheck.14_20;
  double _21;
  double c.15_22;
  double c.16_23;
  double d.17_24;
  double c.18_25;
  double k.19_26;
  double _27;
  double _28;
  double powcheck.20_29;
  double _30;
  double a.21_31;
  double _32;
  double b.22_33;
  double _34;
  long int _35;
  double _36;
  int _37;
  double _38;
  int _39;
  double _40;
  double _41;
  double _42;
  int _43;
  float _44;
  float totalscore.23_45;
  double _46;
  int _47;
  float _48;
  double _49;
  double _50;
  double _51;
  float _52;
  int _53;
  double _54;
  double _55;
  int _56;
  double _57;
  int _58;
  int _59;
  int _60;
  int _61;
  int _65;
  double _66;
  int _69;
  float _70;
  float _71;
  struct basic_ostream & _132;
  struct basic_ostream & _160;
  struct __ostream_type & _169;
  struct basic_ostream & _170;
  double _179;
  struct __ostream_type & _180;
  struct basic_ostream & _181;

  <bb 2> :

  <bb 3> :
  # q_76 = PHI <1(2), q_148(47)>
  # r_78 = PHI <r_93(D)(2), r_79(47)>
  if (q_76 > 5)
    goto <bb 48>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  # p_77 = PHI <1(3), p_146(46)>
  # r_79 = PHI <r_78(3), r_84(46)>
  if (p_77 > 5)
    goto <bb 47>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  begin_97 = clock ();
  a = 1.0e+0;
  b = 1.0e+0;
  c = 1.0e+0;
  d = 1.0e+0;
  if (p_77 == 1)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  k = 1.0e+2;
  goto <bb 15>; [INV]

  <bb 7> :
  if (p_77 == 2)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  k = 2.5e+2;
  goto <bb 15>; [INV]

  <bb 9> :
  if (p_77 == 3)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  k = 5.0e+2;
  goto <bb 15>; [INV]

  <bb 11> :
  if (p_77 == 4)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  k = 1.0e+3;
  goto <bb 15>; [INV]

  <bb 13> :
  if (p_77 == 5)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  k = 1.5e+3;

  <bb 15> :

  <bb 16> :
  # count_73 = PHI <0(15), count_74(26)>
  b.0_1 = b;
  k.1_2 = k;
  if (b.0_1 <= k.1_2)
    goto <bb 17>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 17> :
  # count_74 = PHI <count_73(16), count_75(25)>
  a.2_3 = a;
  k.3_4 = k;
  if (a.2_3 <= k.3_4)
    goto <bb 18>; [INV]
  else
    goto <bb 26>; [INV]

  <bb 18> :
  a.4_5 = a;
  a.5_6 = a;
  _7 = a.4_5 * a.5_6;
  x = _7;
  b.6_8 = b;
  b.7_9 = b;
  _10 = b.6_8 * b.7_9;
  y = _10;
  x.8_11 = x;
  y.9_12 = y;
  _13 = x.8_11 + y.9_12;
  c = _13;
  b.10_14 = b;
  powcheck = b.10_14;

  <bb 19> :
  # count_75 = PHI <count_74(18), count_75(24), count_113(23)>
  k.11_15 = k;
  _16 = k.11_15 * 1.4199999999999999289457264239899814128875732421875e+0;
  _17 = ceil (_16);
  powcheck.12_18 = powcheck;
  if (_17 >= powcheck.12_18)
    goto <bb 20>; [INV]
  else
    goto <bb 25>; [INV]

  <bb 20> :
  powcheck.13_19 = powcheck;
  powcheck.14_20 = powcheck;
  _21 = powcheck.13_19 * powcheck.14_20;
  c.15_22 = c;
  if (_21 == c.15_22)
    goto <bb 21>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 21> :
  c.16_23 = c;
  d.17_24 = d;
  if (c.16_23 >= d.17_24)
    goto <bb 22>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 22> :
  c.18_25 = c;
  d = c.18_25;

  <bb 23> :
  count_113 = count_75 + 1;
  k.19_26 = k;
  _27 = k.19_26 * 2.0e+0;
  _28 = _27 + 1.0e+0;
  powcheck = _28;
  goto <bb 19>; [INV]

  <bb 24> :
  powcheck.20_29 = powcheck;
  _30 = powcheck.20_29 + 1.0e+0;
  powcheck = _30;
  goto <bb 19>; [INV]

  <bb 25> :
  a.21_31 = a;
  _32 = a.21_31 + 1.0e+0;
  a = _32;
  goto <bb 17>; [INV]

  <bb 26> :
  a = 1.0e+0;
  b.22_33 = b;
  _34 = b.22_33 + 1.0e+0;
  b = _34;
  goto <bb 16>; [INV]

  <bb 27> :
  end_120 = clock ();
  _35 = end_120 - begin_97;
  _36 = (double) _35;
  elapsed_secs_121 = _36 / 1.0e+6;
  _37 = p_77 + -1;
  timetake[_37] = elapsed_secs_121;
  if (p_77 == 1)
    goto <bb 28>; [INV]
  else
    goto <bb 29>; [INV]

  <bb 28> :

  <bb 29> :
  # r_80 = PHI <r_79(27), 3.0000000260770320892333984375e-3(28)>
  if (p_77 == 2)
    goto <bb 30>; [INV]
  else
    goto <bb 31>; [INV]

  <bb 30> :

  <bb 31> :
  # r_81 = PHI <r_80(29), 3.50000001490116119384765625e-2(30)>
  if (p_77 == 3)
    goto <bb 32>; [INV]
  else
    goto <bb 33>; [INV]

  <bb 32> :

  <bb 33> :
  # r_82 = PHI <r_81(31), 2.730000019073486328125e-1(32)>
  if (p_77 == 4)
    goto <bb 34>; [INV]
  else
    goto <bb 35>; [INV]

  <bb 34> :

  <bb 35> :
  # r_83 = PHI <r_82(33), 2.224999904632568359375e+0(34)>
  if (p_77 == 5)
    goto <bb 36>; [INV]
  else
    goto <bb 37>; [INV]

  <bb 36> :

  <bb 37> :
  # r_84 = PHI <r_83(35), 7.535999774932861328125e+0(36)>
  _38 = (double) r_84;
  _39 = p_77 + -1;
  _40 = timetake[_39];
  _41 = _38 / _40;
  _42 = _41 * 2.0e+2;
  _43 = p_77 + -1;
  _44 = (float) _42;
  score[_43] = _44;
  totalscore.23_45 = totalscore;
  _46 = (double) totalscore.23_45;
  _47 = p_77 + -1;
  _48 = score[_47];
  _49 = (double) _48;
  _50 = _49 * 2.00000000000000011102230246251565404236316680908203125e-1;
  _51 = _46 + _50;
  _52 = (float) _51;
  totalscore = _52;
  _53 = p_77 + -1;
  _54 = stagetime[_53];
  _55 = elapsed_secs_121 * 2.00000000000000011102230246251565404236316680908203125e-1;
  _56 = p_77 + -1;
  _57 = _54 + _55;
  stagetime[_56] = _57;
  _58 = q_76 + -1;
  _59 = _58 * 5;
  _60 = _59 + p_77;
  _61 = _60 * 4;
  _132 = std::basic_ostream<char>::operator<< (&cout, _61);

  <bb 38> :
  std::__ostream_insert<char, std::char_traits<char> > (_132, " % complete!", 12);

  <bb 39> :
  __c = 10;
  _160 = std::__ostream_insert<char, std::char_traits<char> > (_132, &__c, 1);

  <bb 40> :
  __c ={v} {CLOBBER};
  std::__ostream_insert<char, std::char_traits<char> > (&cout, "Time taken for that stage:- ", 28);

  <bb 41> :
  _65 = p_77 + -1;
  _66 = timetake[_65];
  _169 = std::basic_ostream<char>::_M_insert<double> (&cout, _66);

  <bb 42> :
  __c = 10;
  _170 = std::__ostream_insert<char, std::char_traits<char> > (_169, &__c, 1);

  <bb 43> :
  __c ={v} {CLOBBER};
  std::__ostream_insert<char, std::char_traits<char> > (&cout, "Score obtained for that stage:- ", 32);

  <bb 44> :
  _69 = p_77 + -1;
  _70 = score[_69];
  _71 = _70 * 5.0e+0;
  _179 = (double) _71;
  _180 = std::basic_ostream<char>::_M_insert<double> (&cout, _179);

  <bb 45> :
  __c = 10;
  _181 = std::__ostream_insert<char, std::char_traits<char> > (_180, &__c, 1);

  <bb 46> :
  __c ={v} {CLOBBER};
  p_146 = p_77 + 1;
  goto <bb 4>; [INV]

  <bb 47> :
  q_148 = q_76 + 1;
  goto <bb 3>; [INV]

  <bb 48> :
  timetake ={v} {CLOBBER};
  return;

  <bb 49> :
<L51>:
  timetake ={v} {CLOBBER};
  resx 1

}



;; Function std::exception::exception (_ZNSt9exceptionC2ERKS_, funcdef_no=1891, decl_uid=3171, cgraph_uid=650, symbol_order=667)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
D.3173 = &NONLOCAL
_ZTVSt9exception = NONLOCAL
derefaddrtmp(11) = &_ZTVSt9exception
*this = derefaddrtmp(11)

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"this"[label="this = { 5 }"];
"D.3173"[label="D.3173 = { 5 }"];
"_ZTVSt9exception";
"derefaddrtmp(11)"[label="derefaddrtmp(11) = { 10 }"];
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*this";
"*D.3173";
"*_ZTVSt9exception";
"*derefaddrtmp(11)";

  // Edges in the constraint graph:
"*ESCAPED" -> "ESCAPED";
"NONLOCAL" -> "_ZTVSt9exception";
"NONLOCAL" -> "*ESCAPED";
"derefaddrtmp(11)" -> "*this";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"this" [label="\N\n*this = derefaddrtmp(11)\l"];
"_ZTVSt9exception";
"derefaddrtmp(11)";

  // Edges in the constraint graph:
"NONLOCAL" -> "_ZTVSt9exception";
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_ZTVSt9exception";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"this" [label="\N\n*this = derefaddrtmp(11)\l"];
"_ZTVSt9exception";
"derefaddrtmp(11)";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"NONLOCAL" -> "_ZTVSt9exception";
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_ZTVSt9exception";
"_ZTVSt9exception" -> "ESCAPED";
"derefaddrtmp(11)" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL _ZTVSt9exception }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
D.3173 = { NONLOCAL } same as this
_ZTVSt9exception = { ESCAPED NONLOCAL }
derefaddrtmp(11) = { _ZTVSt9exception }


Alias information for constexpr std::exception::exception(const std::exception&)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.3125 } (nonlocal, escaped, interposable)

Flow-insensitive points-to information

this_3(D), points-to non-local, points-to NULL, points-to vars: { }

std::exception::exception (struct exception * const this, const struct exception & D.3173)
{
  <bb 2> :
  MEM[(struct  &)this_3(D)] ={v} {CLOBBER};
  this_3(D)->_vptr.exception = &MEM[(void *)&_ZTVSt9exception + 16B];
  return;

}



;; Function main (main, funcdef_no=1889, decl_uid=44612, cgraph_uid=652, symbol_order=669)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
argc = &NONLOCAL
argv = &NONLOCAL
ESCAPED = &STRING
ESCAPED = &NONLOCAL
_2 = *argv
ESCAPED = _2
ESCAPED = &STRING
_23 = NONLOCAL
totalscore = NONLOCAL
totalscore.24_3 = totalscore
_4 = totalscore.24_3
_6 = *argv
ESCAPED = _23
ESCAPED = &STRING
ESCAPED = _6
ESCAPED = _4
ESCAPED = _23
_ZSt4cout = NONLOCAL
ESCAPED = &_ZSt4cout
ESCAPED = &STRING
ESCAPED = &NONLOCAL
totalscore.25_11 = totalscore
_53 = totalscore.25_11
ESCAPED = &_ZSt4cout
ESCAPED = _53
_54 = NONLOCAL
ESCAPED = _54
ESCAPED = &STRING
ESCAPED = &NONLOCAL
__c = &NONLOCAL
ESCAPED = _54
ESCAPED = &__c
ESCAPED = &NONLOCAL
_44 = NONLOCAL
ESCAPED = &NULL
CALLUSED(31) = CALLUSED(31) + UNKNOWN
CALLUSED(31) = *CALLUSED(31) + UNKNOWN
CALLUSED(31) = &NONLOCAL
_7 = CALLUSED(31)
_7 = NONLOCAL
CALLUSED(35) = CALLUSED(35) + UNKNOWN
CALLUSED(35) = *CALLUSED(35) + UNKNOWN
CALLUSED(35) = _7
_8 = CALLUSED(35)
_8 = NONLOCAL
_ZTVSt9exception = NONLOCAL
e = &_ZTVSt9exception
CALLUSED(40) = CALLUSED(40) + UNKNOWN
CALLUSED(40) = *CALLUSED(40) + UNKNOWN
CALLUSED(40) = &NONLOCAL
_9 = CALLUSED(40)
_9 = NONLOCAL
ESCAPED = _9
_ZSt4cerr = NONLOCAL
ESCAPED = &_ZSt4cerr
ESCAPED = &STRING
ESCAPED = &e
ESCAPED = &e

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED"[label="ESCAPED = { 1 3 5 18 20 23 27 }"];
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"argc"[label="argc = { 5 }"];
"argv"[label="argv = { 5 }"];
"puts";
"exit";
"_Z8mainbasev";
"fopen";
"totalscore";
"fprintf";
"fclose";
"_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l";
"_ZSt4cout";
"_ZNSo9_M_insertIdEERSoT_";
"__c"[label="__c = { 5 }"];
"__builtin_eh_pointer";
"__cxa_get_exception_ptr";
"e"[label="e = { 24 }"];
"_ZTVSt9exception";
"__cxa_begin_catch";
"_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc";
"_ZSt4cerr";
"_ZNSt9exceptionD1Ev";
"__cxa_end_catch";
"_2";
"_23";
"totalscore.24_3";
"_4";
"_6";
"totalscore.25_11";
"_53";
"_54";
"_44";
"CALLUSED(31)"[label="CALLUSED(31) = { 5 }"];
"CALLCLOBBERED(32)";
"_7";
"CALLUSED(35)";
"CALLCLOBBERED(36)";
"_8";
"CALLUSED(40)"[label="CALLUSED(40) = { 5 }"];
"CALLCLOBBERED(41)";
"_9";
"*NULL";
"*ANYTHING";
"*STRING";
"*STOREDANYTHING";
"*INTEGER";
"*argc";
"*argv";
"*puts";
"*exit";
"*_Z8mainbasev";
"*fopen";
"*fprintf";
"*fclose";
"*_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l";
"*_ZSt4cout";
"*_ZNSo9_M_insertIdEERSoT_";
"*__c";
"*__builtin_eh_pointer";
"*__cxa_get_exception_ptr";
"*e";
"*_ZTVSt9exception";
"*__cxa_begin_catch";
"*_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc";
"*_ZSt4cerr";
"*_ZNSt9exceptionD1Ev";
"*__cxa_end_catch";
"*_2";
"*_6";
"*_44";
"*CALLUSED(31)";
"*CALLCLOBBERED(32)";
"*_7";
"*CALLUSED(35)";
"*CALLCLOBBERED(36)";
"*_8";
"*CALLUSED(40)";
"*CALLCLOBBERED(41)";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"_2" -> "ESCAPED";
"_23" -> "ESCAPED";
"_4" -> "ESCAPED";
"_6" -> "ESCAPED";
"_53" -> "ESCAPED";
"_54" -> "ESCAPED";
"_9" -> "ESCAPED";
"ESCAPED" -> "ESCAPED";
"NONLOCAL" -> "totalscore";
"NONLOCAL" -> "_ZSt4cout";
"NONLOCAL" -> "_ZTVSt9exception";
"NONLOCAL" -> "_ZSt4cerr";
"*argv" -> "_2";
"NONLOCAL" -> "_23";
"totalscore" -> "totalscore.24_3";
"totalscore.24_3" -> "_4";
"*argv" -> "_6";
"totalscore" -> "totalscore.25_11";
"totalscore.25_11" -> "_53";
"NONLOCAL" -> "_54";
"NONLOCAL" -> "_44";
"NONLOCAL" -> "_7";
"CALLUSED(31)" -> "_7";
"_7" -> "CALLUSED(35)";
"NONLOCAL" -> "_8";
"CALLUSED(35)" -> "_8";
"NONLOCAL" -> "_9";
"CALLUSED(40)" -> "_9";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"argc" [label="\N\n_2 = *argc\l"];
"puts";
"exit";
"_Z8mainbasev";
"fopen";
"fprintf";
"fclose";
"_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l";
"_ZSt4cout";
"_ZNSo9_M_insertIdEERSoT_";
"__c";
"__builtin_eh_pointer";
"__cxa_get_exception_ptr";
"e";
"_ZTVSt9exception";
"__cxa_begin_catch";
"_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc";
"_ZSt4cerr";
"_ZNSt9exceptionD1Ev";
"__cxa_end_catch";
"_2";
"_23";
"CALLUSED(31)" [label="\N\nCALLUSED(31) = CALLUSED(31) + UNKNOWN\lCALLUSED(31) = *CALLUSED(31) + UNKNOWN\l"];
"CALLCLOBBERED(32)";
"_7";
"CALLUSED(35)" [label="\N\nCALLUSED(35) = CALLUSED(35) + UNKNOWN\lCALLUSED(35) = *CALLUSED(35) + UNKNOWN\l"];
"CALLCLOBBERED(36)";
"CALLUSED(40)" [label="\N\nCALLUSED(40) = CALLUSED(40) + UNKNOWN\lCALLUSED(40) = *CALLUSED(40) + UNKNOWN\l"];
"CALLCLOBBERED(41)";
"_9";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_ZSt4cout";
"STOREDANYTHING" -> "__c";
"STOREDANYTHING" -> "e";
"STOREDANYTHING" -> "_ZTVSt9exception";
"STOREDANYTHING" -> "_ZSt4cerr";
"STOREDANYTHING" -> "CALLUSED(31)";
"STOREDANYTHING" -> "CALLUSED(35)";
"STOREDANYTHING" -> "CALLUSED(40)";
"_2" -> "ESCAPED";
"_23" -> "ESCAPED";
"_23" -> "_ZSt4cout";
"_23" -> "_ZTVSt9exception";
"_23" -> "_ZSt4cerr";
"_23" -> "_7";
"_23" -> "CALLUSED(35)";
"_23" -> "_9";
"CALLUSED(31)" -> "_7";
"_7" -> "CALLUSED(35)";
"CALLUSED(40)" -> "_9";
"_9" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = _23\l"];
"STOREDANYTHING";
"INTEGER";
"argc" [label="\N\n_2 = *argc\l"];
"puts";
"exit";
"_Z8mainbasev";
"fopen";
"fprintf";
"fclose";
"_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l";
"_ZSt4cout";
"_ZNSo9_M_insertIdEERSoT_";
"__c";
"__builtin_eh_pointer";
"__cxa_get_exception_ptr";
"e";
"_ZTVSt9exception";
"__cxa_begin_catch";
"_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc";
"_ZSt4cerr";
"_ZNSt9exceptionD1Ev";
"__cxa_end_catch";
"_2";
"_23";
"CALLUSED(31)" [label="\N\nCALLUSED(31) = CALLUSED(31) + UNKNOWN\lCALLUSED(31) = *CALLUSED(31) + UNKNOWN\l"];
"CALLCLOBBERED(32)";
"_7";
"CALLUSED(35)" [label="\N\nCALLUSED(35) = CALLUSED(35) + UNKNOWN\lCALLUSED(35) = *CALLUSED(35) + UNKNOWN\l"];
"CALLCLOBBERED(36)";
"CALLUSED(40)" [label="\N\nCALLUSED(40) = CALLUSED(40) + UNKNOWN\lCALLUSED(40) = *CALLUSED(40) + UNKNOWN\l"];
"CALLCLOBBERED(41)";
"_9";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_ZSt4cout";
"STOREDANYTHING" -> "__c";
"STOREDANYTHING" -> "e";
"STOREDANYTHING" -> "_ZTVSt9exception";
"STOREDANYTHING" -> "_ZSt4cerr";
"STOREDANYTHING" -> "CALLUSED(31)";
"STOREDANYTHING" -> "CALLUSED(35)";
"STOREDANYTHING" -> "CALLUSED(40)";
"_ZSt4cout" -> "ESCAPED";
"__c" -> "ESCAPED";
"e" -> "ESCAPED";
"_ZTVSt9exception" -> "ESCAPED";
"_ZSt4cerr" -> "ESCAPED";
"_2" -> "ESCAPED";
"_23" -> "ESCAPED";
"_23" -> "_ZSt4cout";
"_23" -> "__c";
"_23" -> "e";
"_23" -> "_ZTVSt9exception";
"_23" -> "_ZSt4cerr";
"_23" -> "_2";
"_23" -> "CALLUSED(31)";
"_23" -> "_7";
"_23" -> "CALLUSED(35)";
"_23" -> "CALLUSED(40)";
"_23" -> "_9";
"CALLUSED(31)" -> "_7";
"_7" -> "CALLUSED(35)";
"CALLUSED(40)" -> "_9";
"_9" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL STRING ESCAPED NONLOCAL _ZSt4cout __c e _ZTVSt9exception _ZSt4cerr }
NONLOCAL = { ESCAPED NONLOCAL } same as _23
STOREDANYTHING = { }
INTEGER = { ANYTHING }
argc = { NONLOCAL }
argv = { NONLOCAL } same as argc
puts = { }
exit = { }
_Z8mainbasev = { }
fopen = { }
totalscore = { ESCAPED NONLOCAL } same as _23
fprintf = { }
fclose = { }
_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l = { }
_ZSt4cout = { ESCAPED NONLOCAL }
_ZNSo9_M_insertIdEERSoT_ = { }
__c = { ESCAPED NONLOCAL }
__builtin_eh_pointer = { }
__cxa_get_exception_ptr = { }
e = { ESCAPED NONLOCAL _ZTVSt9exception }
_ZTVSt9exception = { ESCAPED NONLOCAL }
__cxa_begin_catch = { }
_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc = { }
_ZSt4cerr = { ESCAPED NONLOCAL }
_ZNSt9exceptionD1Ev = { }
__cxa_end_catch = { }
_2 = { ESCAPED NONLOCAL }
_23 = { ESCAPED NONLOCAL }
totalscore.24_3 = { ESCAPED NONLOCAL } same as _23
_4 = { ESCAPED NONLOCAL } same as _23
_6 = { ESCAPED NONLOCAL } same as _2
totalscore.25_11 = { ESCAPED NONLOCAL } same as _23
_53 = { ESCAPED NONLOCAL } same as _23
_54 = { ESCAPED NONLOCAL } same as _23
_44 = { ESCAPED NONLOCAL } same as _23
CALLUSED(31) = { ESCAPED NONLOCAL }
CALLCLOBBERED(32) = { }
_7 = { ESCAPED NONLOCAL }
CALLUSED(35) = { ESCAPED NONLOCAL }
CALLCLOBBERED(36) = { }
_8 = { ESCAPED NONLOCAL } same as CALLUSED(35)
CALLUSED(40) = { ESCAPED NONLOCAL }
CALLCLOBBERED(41) = { }
_9 = { ESCAPED NONLOCAL }


Alias information for int main(int, char**)

Aliased symbols

__c, UID D.48386, char, is addressable
e, UID D.44615, struct exception, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.3125 D.39827 D.39828 D.44615 D.48386 } (nonlocal, escaped, interposable)

Flow-insensitive points-to information

_2, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_6, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_7, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_8, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_9, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
argv_21(D), points-to non-local, points-to NULL, points-to vars: { }
_23, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_44, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_54, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

main (int argc, char * * argv)
{
  struct basic_ostream & D.48396;
  struct __ostream_type & D.48393;
  struct basic_ostream & D.48390;
  struct basic_ostream & D.48387;
  char __c;
  struct exception e;
  struct FILE * F;
  char * _2;
  float totalscore.24_3;
  double _4;
  char * _6;
  void * _7;
  void * _8;
  void * _9;
  float totalscore.25_11;
  struct FILE * _23;
  struct basic_ostream & _44;
  double _53;
  struct __ostream_type & _54;

  <bb 2> :
  if (argc_16(D) != 3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  __builtin_puts (&"Arguments: filename optimisationflag"[0]);
  exit (-1);

  <bb 4> :
  mainbase ();
  _2 = MEM[(char * *)argv_21(D) + 8B];
  _23 = fopen (_2, "a");

  <bb 5> :
  totalscore.24_3 = totalscore;
  _4 = (double) totalscore.24_3;
  _6 = MEM[(char * *)argv_21(D) + 16B];
  fprintf (_23, "%s %lf\n", _6, _4);

  <bb 6> :
  fclose (_23);

  <bb 7> :
  std::__ostream_insert<char, std::char_traits<char> > (&cout, "Your system has scored a total of ", 34);
  totalscore.25_11 = totalscore;
  _53 = (double) totalscore.25_11;
  _54 = std::basic_ostream<char>::_M_insert<double> (&cout, _53);
  std::__ostream_insert<char, std::char_traits<char> > (_54, " points!", 8);
  __c = 10;
  _44 = std::__ostream_insert<char, std::char_traits<char> > (_54, &__c, 1);
  __c ={v} {CLOBBER};
  return 0;

  <bb 8> :
<L4>:
  eh_dispatch 1

  <bb 9> :
  resx 1

  <bb 10> :
<L5>:
  _7 = __builtin_eh_pointer (1);
  _8 = __cxa_get_exception_ptr (_7);
  MEM[(struct  &)&e] ={v} {CLOBBER};
  e._vptr.exception = &MEM[(void *)&_ZTVSt9exception + 16B];
  _9 = __builtin_eh_pointer (1);
  __cxa_begin_catch (_9);
  std::operator<< <std::char_traits<char> > (&cerr, "File error! \n");

  <bb 11> :
  std::exception::~exception (&e);
  __cxa_end_catch ();
  e ={v} {CLOBBER};
  goto <bb 7>; [INV]

  <bb 12> :
<L6>:
  std::exception::~exception (&e);
  resx 5

  <bb 13> :
<L7>:
  __cxa_end_catch ();
  resx 3

  <bb 14> :
<L8>:
  e ={v} {CLOBBER};
  resx 2

}



;; Function _GLOBAL__sub_I_check (_GLOBAL__sub_I_check, funcdef_no=2397, decl_uid=48231, cgraph_uid=1157, symbol_order=1366)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED"[label="ESCAPED = { 5 }"];
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"_Z41__static_initialization_and_destruction_0ii";
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*_Z41__static_initialization_and_destruction_0ii";

  // Edges in the constraint graph:
"*ESCAPED" -> "ESCAPED";
"NONLOCAL" -> "*ESCAPED";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"_Z41__static_initialization_and_destruction_0ii";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"_Z41__static_initialization_and_destruction_0ii";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"STOREDANYTHING" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
_Z41__static_initialization_and_destruction_0ii = { }


Alias information for (static initializers for benchmark.cpp)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information


_GLOBAL__sub_I_check ()
{
  <bb 2> :
  __static_initialization_and_destruction_0 (1, 65535);
  return;

}


